#!/usr/bin/env python
import json
import numpy as np
import sys

# it reads bank files generated by CSA sampling, written in 07/08/2015

icall=0
ibank=0
if (len(sys.argv)>1):
  icall=int(eval(sys.argv[1]))
  ibank=int(eval(sys.argv[2]))


def byteify(input):
    if isinstance(input, dict):
        return {byteify(key):byteify(value) for key,value in input.iteritems()}
    elif isinstance(input, list):
        return [byteify(element) for element in input]
    elif isinstance(input, unicode):
        return input.encode('utf-8')
    else:
        return input



def hamiltonian(spins,J,N):
  H = 0

  for i in xrange(N):
    for j in xrange(i+1,N):
      H += spins[i]*spins[j]*J[i,j]
  return  -float(H)/(np.sqrt(N)*N)

def projection(ta,tb,N):
  q = 0

  for i,j in zip(ta,tb):
    q += i*j

  return abs(q)/float(N)


name='bank1_0_0.dat'
nameJ='J'+str(icall)+'.dat'
J=np.loadtxt(nameJ,dtype='int')

with open(name,'r') as f:
  bank10=json.load(f)
bank10=byteify(bank10)

#for i in xrange(len(bank10)):
#  print i, bank10[i][1]

t1 = bank10[0][0]
t2 =  bank10[11][0]

#print t1
#print t2

N = len(bank10[0][0])

#print "first", hamiltonian(t1,J,N)
#print "second", hamiltonian(t2,J,N)

#print projection(t1,t2,N)

name='bank_min'+str(icall)+'_'+str(ibank)+'.dat'

with open(name,'r') as f:
  bank10=json.load(f)
bank10=byteify(bank10)

ene_min=2*N
for i in xrange(len(bank10)):
  E = hamiltonian(bank10[i][0],J,N)
  if E < ene_min:
    ene_min = E
    i_min = i

print "min: ", i, ene_min
